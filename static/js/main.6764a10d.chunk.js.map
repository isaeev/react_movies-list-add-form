{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","trim","NewMovie","onAdd","count","setCount","titleInput","setTitleInput","hasTitleError","setHasTitleError","descriptionInput","setDescriptionInput","imgUrlInput","setImgUrlInput","hasImgUrlInputError","setHasImgUrlInputError","imdbUrlInput","setImdbUrlInput","hasImdbUrlInputError","setHasImdbUrlInputError","imdbIdInput","setImdbIdInput","hasImdbIdInputError","setImdbIdInputError","onSubmit","preventDefault","newValue","disabled","App","moviesFromServer","setMovies","newMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6764a10d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => {\n            setTouched(true);\n            onChange(value.trim());\n          }}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  'onAdd': (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n\n  const [titleInput, setTitleInput] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(true);\n\n  const [descriptionInput, setDescriptionInput] = useState('');\n\n  const [imgUrlInput, setImgUrlInput] = useState('');\n  const [hasImgUrlInputError, setHasImgUrlInputError] = useState(true);\n\n  const [imdbUrlInput, setImdbUrlInput] = useState('');\n  const [hasImdbUrlInputError, setHasImdbUrlInputError] = useState(true);\n\n  const [imdbIdInput, setImdbIdInput] = useState('');\n  const [hasImdbIdInputError, setImdbIdInputError] = useState(true);\n\n  const hasError = () => {\n    if (\n      !hasTitleError\n      && !hasImgUrlInputError\n      && !hasImdbUrlInputError\n      && !hasImdbIdInputError) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newMovie = {\n      title: titleInput,\n      description: descriptionInput,\n      imgUrl: imgUrlInput,\n      imdbUrl: imdbUrlInput,\n      imdbId: imdbIdInput,\n    };\n\n    onAdd(newMovie);\n    setCount(count + 1);\n\n    setTitleInput('');\n    setDescriptionInput('');\n    setImdbUrlInput('');\n    setImgUrlInput('');\n    setImdbIdInput('');\n\n    setHasTitleError(true);\n    setHasImgUrlInputError(true);\n    setHasImdbUrlInputError(true);\n    setImdbIdInputError(true);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => onSubmit(event)}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={titleInput}\n        onChange={newValue => {\n          setTitleInput(newValue);\n          setHasTitleError(!newValue);\n        }}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={descriptionInput}\n        onChange={newValue => setDescriptionInput(newValue)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrlInput}\n        onChange={newValue => {\n          setImgUrlInput(newValue);\n          setHasImgUrlInputError(!newValue);\n        }}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrlInput}\n        onChange={newValue => {\n          setImdbUrlInput(newValue);\n          setHasImdbUrlInputError(!newValue);\n        }}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbIdInput}\n        onChange={newValue => {\n          setImdbIdInput(newValue);\n          setImdbIdInputError(!newValue);\n        }}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={hasError()}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([...moviesFromServer]);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies([...movies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie: Movie) => addMovie(movie)} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}